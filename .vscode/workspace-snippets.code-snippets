{
  // Place your rds workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "React Functional Component Template": {
    "prefix": "rfc",
    "scope": "typescript,typescriptreact",
    "body": [
      "import { cva, type VariantProps } from 'class-variance-authority';",
      "import React from 'react';",
      "import { twMerge } from 'tailwind-merge';",
      "",
      "const ${1:ComponentName}Variants = cva([''], { variants: {} });",
      "",
      "export type ${1:ComponentName}Props = React.ComponentPropsWithoutRef<'${2:div}'> &",
      "  VariantProps<typeof ${1:ComponentName}Variants>;",
      "",
      "export const ${1:ComponentName} = React.forwardRef<React.ElementRef<'${2:div}'>, ${1:ComponentName}Props>(",
      "  ({ className, ...props }, ref) => {",
      "    const classes = ${1:ComponentName}Variants({});",
      "",
      "    return <${2:div} ref={ref} className={twMerge(classes, className)} {...props} />;",
      "  }",
      ");",
      "",
      "${1:ComponentName}.displayName = '${1:ComponentName}';"
    ],
    "description": "Create a new React Functional Component"
  }
}
