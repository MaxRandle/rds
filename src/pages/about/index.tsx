import { type NextPage } from "next";
import Head from "next/head";

import { Section } from "@ui/Section";
import { Container } from "@ui/Container";
import { Typography } from "@ui/Typography";
import { AppNavHeader } from "@/components/composite/AppNavHeader";

import { PUBLIC } from "@/config/routes";
import { Card, CardContent, CardLink } from "@ui/Card";
import { Figure } from "@ui/Figure";

import { motion, useInView } from "framer-motion";

import { FiExternalLink } from "react-icons/fi";

import {
  SiNextdotjs,
  SiReact,
  SiTailwindcss,
  SiTypescript,
} from "react-icons/si";
import {
  fadeAndRiseIn,
  fadeAndSlideInFromLeft,
  fadeAndSlideInFromRight,
} from "@/utils/animations";
import { RadixUiLogo } from "@/components/svgs/RadixUiLogo";
import { ReactHookFormLogo } from "@/components/svgs/ReactHookFormLogo";
import { ZodLogo } from "@/components/svgs/ZodLogo";
import { TanStackLogo } from "@/components/svgs/TanStackLogo";
import { CvaLogo } from "@/components/svgs/CvaLogo";
import { FramerLogo } from "@/components/svgs/FramerLogo";
import { AuthJsLogo } from "@/components/svgs/AuthJsLogo";
import { SiPrisma } from "react-icons/si";
import { T3Logo } from "@/components/svgs/T3Logo";
import { TrpcLogo } from "@/components/svgs/TrpcLogo";
import { useRef } from "react";
import { ButtonLink } from "@ui/Button";
import { Divider } from "@ui/Divider/Divider";

const Page: NextPage = () => {
  const CONTENT = {
    hero: {
      heading: "Max Randle",
      body: "Software Engineer",
      media: PUBLIC.media.maxProfilePicture,
    },
    work: {
      heading: "My work",
      body: "I am a Front-End Software Engineer with a passion for creating fast, responsive, accessible, and beautiful web applications using modern tech. I value readability, consistency, simplicity, and agnosticism as the core paradigms of my coding mantra.",
      action: "Résumé",
      media: PUBLIC.media.maxArtExhibit,
    },
    stack: {
      heading: "My Front-End stack",
      tech: [
        {
          icon: SiTypescript,
          name: "TypeScript",
          description:
            "TypeScript is essential and JavaScript is not a viable language for building production applications.",
        },
        {
          icon: SiReact,
          name: "React 18",
          description:
            "This legendary framework continues to make new strides as it rises into its third great era with the introduction of server components.",
        },
        {
          icon: SiNextdotjs,
          name: "Next 13",
          description:
            "What better way to build an application than with the tools and capabilities afforded by Next.js?",
        },
        {
          icon: SiTailwindcss,
          name: "TailwindCSS",
          description:
            "The best thing to happen to CSS since flexbox. Much more than syntax, Tailwind is a design system all on its own.",
        },
      ],
    },
    toolkit: {
      heading: "Favourite tools and libraries",
      tools: [
        {
          name: "TanStack Query",
          icon: TanStackLogo,
          url: "https://tanstack.com/query/latest",
        },
        {
          name: "Auth.js",
          icon: AuthJsLogo,
          url: "https://authjs.dev/",
        },
        {
          name: "React Hook Form",
          icon: ReactHookFormLogo,
          url: "https://react-hook-form.com/",
        },
        {
          name: "tRPC",
          icon: TrpcLogo,
          url: "https://trpc.io/",
        },
        {
          name: "Framer Motion",
          icon: FramerLogo,
          url: "https://www.framer.com/motion/",
        },
        {
          name: "Radix UI",
          icon: RadixUiLogo,
          url: "https://www.radix-ui.com/",
        },
        {
          name: "Prisma",
          icon: SiPrisma,
          url: "https://www.prisma.io/",
        },
        {
          name: "Create T3 App",
          icon: T3Logo,
          url: "https://create.t3.gg/",
        },
        {
          name: "Class Variance Authority",
          icon: CvaLogo,
          url: "https://cva.style/docs",
        },
        {
          name: "Zod",
          icon: ZodLogo,
          url: "https://zod.dev/",
        },
      ],
    },
  };

  const MotionContainer = motion(Container);
  const MotionCardLink = motion(CardLink);
  const MotionTypography = motion(Typography);
  const MotionFigure = motion(Figure);

  const workRef = useRef(null);
  const workIsInView = useInView(workRef, {
    margin: "0% 0% -60% 0%",
  });
  const toolsRef = useRef(null);
  const toolsIsInView = useInView(toolsRef, {
    margin: "0% 0% -60% 0%",
  });

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="min-h-screen overflow-hidden">
        <AppNavHeader />
        <Section>
          <MotionContainer
            className="mx-auto flex flex-col items-center justify-center gap-4 text-center sm:flex-row sm:gap-6 sm:text-left"
            variants={{
              visible: {
                transition: {
                  delayChildren: 0,
                  staggerChildren: 0.15,
                  duration: 0.6,
                },
              },
            }}
            initial="hidden"
            animate="visible"
          >
            <MotionFigure
              variants={fadeAndSlideInFromRight}
              className="aspect-square h-48 w-48 rounded-full sm:mx-0"
              src={CONTENT.hero.media}
              alt="me"
              width={160}
              height={160}
            />
            <div>
              <MotionTypography
                variants={fadeAndSlideInFromRight}
                level="heading1"
              >
                {CONTENT.hero.heading}
              </MotionTypography>
              <MotionTypography
                variants={fadeAndSlideInFromRight}
                level="heading3"
                color="weaker"
              >
                {CONTENT.hero.body}
              </MotionTypography>
            </div>
          </MotionContainer>
        </Section>

        <Container className="flex w-full items-center gap-4 sm:gap-8">
          <Divider className="grow" />
          <ButtonLink
            className="inline-flex items-center gap-2"
            intent={"secondary"}
            href={PUBLIC.documents.resume}
            target="_blank"
          >
            {CONTENT.work.action}
            <FiExternalLink />
          </ButtonLink>
          <Divider className="grow" />
        </Container>

        <Section ref={workRef}>
          <MotionContainer
            className="flex flex-col items-center gap-4 sm:grid sm:grid-cols-2 sm:gap-6"
            initial={workIsInView ? "hidden" : "visible"}
            animate={workIsInView ? "visible" : "hidden"}
            variants={{
              visible: {
                transition: {
                  duration: 0.6,
                },
              },
            }}
          >
            <MotionTypography level="heading2" variants={fadeAndRiseIn}>
              {CONTENT.work.heading}
            </MotionTypography>
            <MotionFigure
              variants={fadeAndRiseIn}
              className="row-span-2 mx-auto aspect-square h-full max-h-[16rem] min-w-[12rem] shrink-0 rounded-full"
              src={CONTENT.work.media}
              alt="me viewing art"
              width={160}
              height={160}
            />
            <MotionTypography
              className="text-center sm:text-left"
              color="weaker"
              variants={fadeAndRiseIn}
            >
              {CONTENT.work.body}
            </MotionTypography>
          </MotionContainer>
        </Section>

        <Section palette={"surface"}>
          <Container>
            <Typography level={"heading2"}>{CONTENT.stack.heading}</Typography>
            <div className="mt-20 grid gap-4 sm:grid-cols-2">
              {CONTENT.stack.tech.map(({ description, icon: Icon, name }) => (
                <Card palette={"base"} key={name}>
                  <CardContent>
                    <Icon size={40} />
                    <Typography level={"subheading"} className="mt-4">
                      {name}
                    </Typography>
                    <Typography
                      color={"weaker"}
                      level={"caption"}
                      className="mt-4"
                    >
                      {description}
                    </Typography>
                  </CardContent>
                </Card>
              ))}
            </div>
          </Container>
        </Section>

        <Section ref={toolsRef}>
          <Container className="mx-auto max-w-3xl text-center lg:px-6">
            <Typography className="" level={"heading2"}>
              {CONTENT.toolkit.heading}
            </Typography>
            <motion.div
              className="mt-20 flex flex-wrap justify-evenly gap-4 sm:justify-center"
              variants={{
                hidden: {
                  transition: {
                    delayChildren: 0.5,
                    staggerChildren: -0.05,
                  },
                },
                visible: {
                  transition: {
                    delayChildren: 0,
                    staggerChildren: 0.1,
                  },
                },
              }}
              initial={toolsIsInView ? "hidden" : "visible"}
              animate={toolsIsInView ? "visible" : "hidden"}
            >
              {CONTENT.toolkit.tools.map(({ name, icon: Icon, url }) => (
                <MotionCardLink
                  key={name}
                  href={url}
                  target="_blank"
                  variants={fadeAndSlideInFromLeft}
                >
                  <CardContent className="flex gap-4">
                    <Icon className="shrink-0" size={32} />
                    <Typography level={"heading3"}>{name}</Typography>
                  </CardContent>
                </MotionCardLink>
              ))}
            </motion.div>
          </Container>
        </Section>
      </main>
    </>
  );
};

export default Page;
